# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ksg_chooser.ui'
#
# Created: Thu Aug 04 14:01:25 2016
#      by: PyQt4 UI code generator 4.11.3
#
# WARNING! All changes made in this file will be lost!
import sys,os
from PyQt4 import QtCore, QtGui
from dbfpy import dbf
import datetime
import win32api
from PyQt4.Qt import QFocusEvent
import xml.etree.ElementTree as etree
from types import NoneType
import _winreg

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class MyTableModel(QtCore.QAbstractTableModel): 
    def __init__(self, datain, headerdata, parent=None, *args): 
        """ datain: a list of lists
            headerdata: a list of strings
        """
        QtCore.QAbstractTableModel.__init__(self, parent, *args) 
        self.arraydata = datain
        self.headerdata = headerdata
 
    def rowCount(self, parent): 
        return len(self.arraydata) 
 
    def columnCount(self, parent): 
        return len(self.arraydata[0]) 
 
    def data(self, index, role): 
        if not index.isValid(): 
            return QtCore.QVariant() 
        elif role != QtCore.Qt.DisplayRole: 
            return QtCore.QVariant() 
        return QtCore.QVariant(self.arraydata[index.row()][index.column()]) 

    def headerData(self, col, orientation, role):
        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
            return QtCore.QVariant(self.headerdata[col])
        return QtCore.QVariant()

    def sort(self, Ncol, order):
        """Sort table by given column number.
        """
        self.emit(SIGNAL("layoutAboutToBeChanged()"))
        self.arraydata = sorted(self.arraydata, key=operator.itemgetter(Ncol))        
        if order == Qt.DescendingOrder:
            self.arraydata.reverse()
        self.emit(SIGNAL("layoutChanged()"))


class message(QtGui.QDialog):
    def __init__(self,ksg_list,errord_list,usl_list):
        super(message, self).__init__()
        self.ksg_list=ksg_list
        self.usl_list=usl_list
        self.errord_list=errord_list
        self.setupUi()    
    def setupUi(self):
        self.setObjectName(_fromUtf8("Dialog"))
        self.resize(980, 660)
        self.verticalLayout = QtGui.QVBoxLayout(self)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.label = QtGui.QLabel(self)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName(_fromUtf8("label"))
        self.verticalLayout.addWidget(self.label)
        self.tableWidget = QtGui.QTableWidget(self)
        self.tableWidget.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setObjectName(_fromUtf8("tableWidget"))
        self.tableWidget.setColumnCount(6)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        #self.tableWidget.horizontalHeader().setCascadingSectionResizes(True)
        #self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.verticalLayout.addWidget(self.tableWidget)
        self.buttonBox = QtGui.QDialogButtonBox(self)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName(_fromUtf8("buttonBox"))
        self.verticalLayout.addWidget(self.buttonBox)

        self.retranslateUi(self)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("accepted()")), self.accept)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("rejected()")), self.reject)
        QtCore.QMetaObject.connectSlotsByName(self)
        i=0
        for ksg in self.ksg_list:
            self.tableWidget.insertRow(i)
            if ksg[4]!='':
                for usl in self.usl_list:
                    if usl[0]==ksg[4]:
                        ksg.append(usl[1])
            j=0
            for cell in ksg:
                self.tableWidget.setItem(i,j,QtGui.QTableWidgetItem(str(cell).decode("CP866")))
                item=self.tableWidget.item(i,j)
                if item<>None:
                    item.setFlags(QtCore.Qt.ItemIsEnabled)
                j=j+1
            item=self.tableWidget.item(i,int(self.errord_list[i]))    
            item.setBackground(QtGui.QColor(255,0,0)); 
            self.tableWidget.setRowHeight(i,60)
            i=i+1   
        self.tableWidget.setWordWrap(True)                  
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget.setColumnWidth(0,60)
        self.tableWidget.setColumnWidth(1,420)
        self.tableWidget.setColumnWidth(2,60)
        self.tableWidget.setColumnWidth(3,60)
        self.tableWidget.setColumnWidth(4,90)
        self.tableWidget.setColumnWidth(5,250)


    def retranslateUi(self, Dialog):
        app_icon = QtGui.QIcon()
        app_icon.addFile('16x16.jpg', QtCore.QSize(16,16))
        app_icon.addFile('24x24.jpg', QtCore.QSize(24,24))
        app_icon.addFile('32x32.jpg', QtCore.QSize(32,32))
        app_icon.addFile('48x48.jpg', QtCore.QSize(48,48))
        app_icon.addFile('256x256.jpg', QtCore.QSize(256,256))
        self.setWindowIcon(app_icon)
        self.setWindowTitle(_translate("Dialog", "Возможные КСГ", None))
        self.label.setText(_translate("Dialog", "Внимание! Данные КСГ не подходят к карте по выделенным условиям. ", None))
        self.tableWidget.setSortingEnabled(True)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Код КСГ", None))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Наименование КСГ", None))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "МКБ осн.", None))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "МКБ соп.", None))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "Код услуги", None))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "Наименование услуги", None))



class ksg_info(QtGui.QDialog):
    def __init__(self,ksg_code,mkb_list,usl_list,ksg_list,vmp_list):
        super(ksg_info, self).__init__()
        self.ksg_code=ksg_code
        self.mkb_list=mkb_list
        self.usl_list=usl_list
        self.ksg_list=ksg_list 
        self.vmp_list=vmp_list
        self.list_info=[["TS16216",(" Дополнительные критерии отнесения: комбинация диагнозов плюс диагноз, характеризующий тяжесть состояния. "+
                                   " В эту группу относятся травмы в 2 и более анатомических областях (голова/шея, позвоночник, грудная клетка,"+ 
                                   " живот, таз, конечности – минимум 2 кода МКБ-10) или один диагноз множественной травмы и травмы в нескольких"+ 
                                   " областях тела + как минимум один из нижеследующих диагнозов: J94.2, J94.8, J94.9, J93, J93.0, J93.1, J93.8,"+ 
                                   " J93.9, J96.0, N17, T79.4, R57.1, R57.8. Распределение кодов МКБ-10, которые участвуют в формировании группы"+
                                   " «Политравма», по анатомическим областям приведено в следующей таблице. Для удобства восприятия, каждой анатомической "+
                                   " области присвоен код (столбец «Код анатомич. области»)."),["Код анатомич. области","Анатомическая область",
                                                                                                 "Коды МКБ-10"],
                         [["Т1","Голова/шея","S02.0, S02.1, S04.0, S05.7, S06.1, S06.2, S06.3, S06.4, S06.5, S06.6, S06.7, S07.0, S07.1,"+ 
                                                                               "S07.8, S09.0, S11.0, S11.1, S11.2, S11.7, S15.0, S15.1, S15.2, S15.3, S15.7, S15.8, S15.9, S17.0, S17.8, S18 "],
                          ["Т2","Позвоночник","S12.0, S12.9, S13.0, S13.1, S13.3, S14.0, S14.3, S22.0, S23.0, S23.1, S24.0, S32.0, S32.1, S33.0, S33.1, S33.2, S33.4, S34.0, S34.3, S34.4"],
                          ["Т3","Грудная клетка","S22.2, S22.4, S22.5, S25.0, S25.1, S25.2, S25.3, S25.4, S25.5, S25.7, S25.8, S25.9, S26.0, S27.0, S27.1, S27.2, S27.4, S27.5, S27.6, S27.8, S28.0, S28.1"],
                          ["Т4","Живот","S35.0, S35.1, S35.2, S35.3, S35.4, S35.5, S35.7, S35.8, S35.9, S36.0, S36.1, S36.2, S36.3, S36.4, S36.5, S36.8, S36.9, S37.0, S38.3"],
                          ["Т5","Таз","S32.3, S32.4, S32.5, S36.6, S37.1, S37.2, S37.4, S37.5, S37.6, S37.8, S38.0, S38.2"],
                          ["Т6","Конечности","S42.2, S42.3, S42.4, S42.8, S45.0, S45.1, S45.2, S45.7, S45.8, S47 , S48.0, S48.1, S48.9, S52.7, S55.0, S55.1, S55.7, S55.8, S57.0, S57.8, S57.9, S58.0, S58.1, S58.9, S68.4, S71.7, S72.0, S72.1, S72.2, S72.3, S72.4, S72.7, S75.0, S75.1, S75.2, S75.7, S75.8, S77.0, S77.1, S77.2, S78.0, S78.1, S78.9, S79.7, S82.1, S82.2, S82.3, S82.7, S85.0, S85.1, S85.5, S85.7, S87.0, S87.8, S88.0, S88.1, S88.9, S95.7, S95.8, S95.9, S97.0, S97.8, S98.0 "],
                          ["Т7","Множественная травма","S02.7, S12.7, S22.1, S27.7, S29.7, S31.7, S32.7, S36.7, S38.1, S39.6, S39.7, S37.7, S42.7, S49.7, T01.1, T01.8, T01.9, T02.0, T02.1, T02.2, T02.3, T02.4, T02.5, T02.6, T02.7, T02.8, T02.9, T04.0, T04.1, T04.2, T04.3, T04.4, T04.7, T04.8, T04.9, T05.0, T05.1, T05.2, T05.3, T05.4, T05.5, T05.6, T05.8, T05.9, T06.0, T06.1, T06.2, T06.3, T06.4, T06.5, T06.8, T07 "]]],
                        ["TS16002","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента. Если при наличии диагноза класса МКБ 10 «Беременность, роды и послеродовой период» (О00-О99) в правилах группировки отсутствуют закодированные услуги, соответствующие родоразрешению, случай оказания медицинской помощи подлежит оплате по тарифу КСГ «Осложнения, связанные с беременностью». При дородовой госпитализации в отделение патологии беременности с последующим родоразрешением оказанная медицинская помощь выставляется на оплату по двум КСГ («Осложнения, связанные с беременностью») в случае пребывания пациентки в отделении патологии беременности в течение шести дней и более."],
                        ["TS16003","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["CS16004","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента. 3.    Законченный случай оказания медицинской помощи в связи с родами предъявляется к оплате по тарифу КСГ «Родоразрешение» вне зависимости от основного диагноза и производится с указанием кода одной из нижеука-занных услуг: B01.001.009 «Ведение физиологических родов врачом-акушером-гинекологом»;B02.001.002 «Ведение физиологических родов акушеркой»; B01.001.006 «Ведение патологических родов врачом-акушером-гинекологом»."],
                        ["HS16005","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента. При выполнении операции кесарева сечения, случай подлежит оплате по тарифу КСГ «Кесарево сечение», вне зависимости от диагноза. Если в ходе оказания медицинской помощи роженице выполнялась операция, относимая по правилам группировки к КСГ «Операции на женских половых органах» уровней 3 и 4, законченный случай оказания медицинской помощи выставляется на оплату по тарифу КСГ по коду выполненной операции согласно правилам группировки."],
                        ["HS16011","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента. В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оплате по тарифу терапевтической КСГ (при отсутствии подлежащей применению согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["HS16012","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента. В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оплате по тарифу терапевтической КСГ (при отсутствии подлежащей применению согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["TS16016","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["CS16083","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["CS16084","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["TS16097","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["XS16140","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["HS16148","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["HS16149","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["CS16153","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["HS16154","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента. В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оплате по тарифу терапевтической КСГ (при отсутствии подлежащей применению согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["HS16155","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["CS16179","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["TS16200","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["TS16252","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["HS16281","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента. В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оплате по тарифу терапевтической КСГ (при отсутствии подлежащей применению согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["CS16295","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["HS16299","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["HD16003","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["HD16004","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["CD16109","Оплата сверхкоротких случаев оказания стационарной медицинской помощи относимых к которым осуществляется по тарифу КСГ независимо от фактического пребывания пациента"],
                        ["TS16017","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16029","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["CS16083","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["CS16084","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16095","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["CS16153","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16189","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16191","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16193","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16194","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16198","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16224","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["HS16237","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1. В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оп-лате по тарифу терапевтической КСГ (при отсутствии подлежащей примене-нию согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["TS16247","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["TS16253","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["HS16265","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["HS16266","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["HS16267","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["HS16268","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["HS16269","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["CS16295","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["HS16299","При формировании стоимости законченного случая лечения в стационарных условиях, по которым применятся КфПУ равный 1"],
                        ["CS16107","Оплата случаев оказания стационарной медицинской помощи независимо от фактического пребывания пациента"],
                        ["HS16073","В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оп-лате по тарифу терапевтической КСГ (при отсутствии подлежащей примене-нию согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["HS16074","В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оп-лате по тарифу терапевтической КСГ (при отсутствии подлежащей примене-нию согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["HS16226","В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оп-лате по тарифу терапевтической КСГ (при отсутствии подлежащей примене-нию согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]],
                        ["HS16034","В случае если пациенту оказывалось оперативное лечение, но тариф хирургической КСГ, к которой подлежит отнесению случай лечения согласно настоящей части, меньше тарифа терапевтической КСГ, к которой его можно было бы отнести в соответствии с кодом МКБ 10, случай предъявляется к оп-лате по тарифу терапевтической КСГ (при отсутствии подлежащей примене-нию согласно правилам группировки КСГ комбинированной КСГ). В этом случае в реестре счетов на оплату медицинской помощи по ОМС указывается код хирургического вмешательства согласно Номенклатуре. Вышеуказанное правило отнесения случая к КСГ большей стоимости не применяется для указанных в таблице 1 настоящего тарифного соглашения комбинаций терапевтических и хирургических КСГ, при которых случай оказания медицинской помощи предъявляется к оплате по тарифу хирургической КСГ.",
                         ["№ стр.","№ КСГ","Наименование КСГ, сформированной по услуге","КфОЗ","№ КСГ",
                          "Наименование КСГ, сформированной по диагнозу","КфОЗ"],
                         [["1.","11","Операции на женских половых органах (уровень 1)","0.39","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["2.","12","Операции на женских половых органах (уровень 2)","0.58","9","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера женских половых органов","0.89"],
                          ["3.","11","Операции на женских половых органах (уровень 1)","0.39","10","Другие болезни, врожденные аномалии, повреждения женских половых органов","0.46"],
                          ["4.","73","Операции на кишечнике и анальной области (уровень 1)","0.84","18","Воспалительные заболевания кишечника","2.01"],
                          ["5.","74","Операции на кишечнике и анальной области (уровень 2)","1.74","18","Воспалительные заболевания кишечника","2.01"],
                          ["6.","154","Операции на органе зрения (уровень 1)","0.49","160","Болезни глаза","0.51"],
                          ["7.","281","Операции на органах полости рта (уровень 1)","0.74","280","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, взрослые","0.89"],
                          ["8.","281","Операции на органах полости рта (уровень 1)","0.74","188","Болезни полости рта, слюнных желез и челюстей, врожденные аномалии лица и шеи, дети","0.79"],
                          ["9.","226","Операции на мужских половых органах, взрослые (уровень 1)","1.20","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.64"],
                          ["10.","34","Операции на мужских половых органах, дети (уровень 1)","0.97","223","Доброкачественные новообразования, новообразования in situ, неопределенного и неизвестного характера мочевых органов и мужских половых органов","0.67"],
                          ["11.","237","Операции на коже, подкожной клетчатке, придатках кожи (уровень 1)","0.55","252","Доброкачественные новообразования, новообразования in situ кожи, жировой ткани","0.66"]]]]
        self.setupUi()   
    
    def setupUi(self):
        self.setObjectName(_fromUtf8("Dialog"))
        self.resize(1210, 809)
        self.verticalLayout = QtGui.QVBoxLayout(self)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.label = QtGui.QLabel(self)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName(_fromUtf8("label"))
        self.verticalLayout.addWidget(self.label)
        self.label_4 = QtGui.QLabel(self)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setWordWrap(True)
        self.label_4.setObjectName(_fromUtf8("label_4"))
        self.verticalLayout.addWidget(self.label_4)
        self.horizontalLayout = QtGui.QHBoxLayout()
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.verticalLayout_3 = QtGui.QVBoxLayout()
        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
        self.label_2 = QtGui.QLabel(self)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.verticalLayout_3.addWidget(self.label_2)
        self.tableWidget = QtGui.QTableWidget(self)
        self.tableWidget.setObjectName(_fromUtf8("tableWidget"))
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.verticalLayout_3.addWidget(self.tableWidget)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayout_2 = QtGui.QVBoxLayout()
        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
        self.label_3 = QtGui.QLabel(self)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName(_fromUtf8("label_3"))
        self.verticalLayout_2.addWidget(self.label_3)
        self.tableWidget_2 = QtGui.QTableWidget(self)
        self.tableWidget_2.setObjectName(_fromUtf8("tableWidget_2"))
        if len(self.vmp_list)>0:
            self.tableWidget_2.setColumnCount(3)
        else:
            self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(0)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        if len(self.vmp_list)>0:
            item = QtGui.QTableWidgetItem()
            self.tableWidget_2.setHorizontalHeaderItem(2, item)
        self.verticalLayout_2.addWidget(self.tableWidget_2)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.label_5 = QtGui.QLabel(self)
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName(_fromUtf8("label_5"))
        self.verticalLayout.addWidget(self.label_5)
        self.horizontalLayout_2 = QtGui.QHBoxLayout()
        self.horizontalLayout_2.setObjectName(_fromUtf8("horizontalLayout_2"))
        self.label_6 = QtGui.QLabel(self)
        self.label_6.setObjectName(_fromUtf8("label_6"))
        self.horizontalLayout_2.addWidget(self.label_6)
        self.lineEdit = QtGui.QLineEdit(self)
        self.lineEdit.setObjectName(_fromUtf8("lineEdit"))
        self.horizontalLayout_2.addWidget(self.lineEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.horizontalLayout_3 = QtGui.QHBoxLayout()
        self.horizontalLayout_3.setObjectName(_fromUtf8("horizontalLayout_3"))      
        self.textEdit = QtGui.QTextEdit(self)
        self.textEdit.setObjectName(_fromUtf8("textEdit"))
        self.horizontalLayout_3.addWidget(self.textEdit)
        self.tableWidget_3 = QtGui.QTableWidget(self)
        self.tableWidget_3.setObjectName(_fromUtf8("tableWidget_3"))
        self.tableWidget_3.setColumnCount(2)
        self.tableWidget_3.setRowCount(0)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(1, item)
        self.horizontalLayout_3.addWidget(self.tableWidget_3)
        self.tableWidget_3.setVisible(False)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        
        
        self.buttonBox = QtGui.QDialogButtonBox(self)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName(_fromUtf8("buttonBox"))
        self.verticalLayout.addWidget(self.buttonBox)
        self.retranslateUi(self)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("accepted()")), self.accept)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("rejected()")), self.reject)
        QtCore.QMetaObject.connectSlotsByName(self)
        for ksg in self.ksg_list:
            if len(ksg)>0:
                if ksg[0]==self.ksg_code:
                    self.label_4.setText(str(ksg[0])+' '+str(ksg[1]).decode('CP866'))
                    self.lineEdit.setText(str(ksg[12]).decode('CP866'))
                    break
        mkb_to_ksg=[]
        usl_to_ksg=[]
        for ksg in self.ksg_list:
            if ksg[0]==self.ksg_code: 
                if ksg[3]!='':
                    for mkb in self.mkb_list:
                        if ksg[3]==mkb[0]:
                            mkb_to_ksg.append(mkb)
        self.addToWidget(self.tableWidget,mkb_to_ksg)
        if len(self.usl_list)>0:
            for ksg in self.ksg_list:
                if ksg[0]==self.ksg_code: 
                    if ksg[5]!='':
                        for uslug in self.usl_list:
                            if ksg[5]==uslug[0]:
                                usl_to_ksg.append(uslug)
        if len(self.vmp_list)>0:
            for vmp in self.vmp_list:
                if vmp[0]==self.ksg_code:
                    usl_to_ksg.append([vmp[2],vmp[1],vmp[3]])
        self.addToWidget(self.tableWidget_2,usl_to_ksg)
        for os_osl in self.list_info:
            if os_osl[0]==self.ksg_code:
                self.textEdit.setText(os_osl[1])
                if len(os_osl)>2:
                    self.show_dop_info_table(os_osl)  
          
    def show_dop_info_table(self,data):
        self.tableWidget_3.setColumnCount(len(data[2]))
        i=0
        for col_name in data[2]:
            item = QtGui.QTableWidgetItem()
            self.tableWidget_3.setHorizontalHeaderItem(i, item)
            item = self.tableWidget_3.horizontalHeaderItem(i)
            item.setText(_translate("Dialog", col_name, None))
            i=i+1
        i=0
        for col in data[3]:
            self.tableWidget_3.insertRow(i)
            self.tableWidget_3.setRowHeight(i,60)
            j=0
            for cell in col:
                self.tableWidget_3.setItem(i,j,QtGui.QTableWidgetItem(cell))
                self.tableWidget_3.item(i,j).setFlags(QtCore.Qt.ItemIsEnabled)
                j=j+1
            i=i+1                 
        self.tableWidget_3.setVisible(True)   
        self.tableWidget_3.resizeColumnsToContents()
        self.tableWidget_3.setWordWrap(True)
        
    
                    
    def addToWidget(self,widget,data):
        widget.setRowCount(0)
        i=0
        for item in data:
            if len(item)>0:
                widget.insertRow(i)
                widget.setWordWrap(True)
                widget.setRowHeight(i,80)
                j=0
                for parts in item:
                    if j==2:
                        widget.setItem(i,j,QtGui.QTableWidgetItem((str(parts).decode('CP866').replace(';', '; '))))
                    else:
                        widget.setItem(i,j,QtGui.QTableWidgetItem((str(parts).decode('CP866'))))
                    widget.item(i,j).setFlags(QtCore.Qt.ItemIsEnabled)
                    j=j+1                      
                i=i+1
        #widget.resizeColumnsToContents()
        widget.setColumnWidth(0,100)
        widget.setColumnWidth(1,400)
        if len(self.vmp_list)>0:
            widget.setColumnWidth(2,300)
                        

    def retranslateUi(self, Dialog):
        self.setWindowTitle(_translate("Dialog", "Информация о КСГ", None))
        app_icon = QtGui.QIcon()
        app_icon.addFile('16x16.jpg', QtCore.QSize(16,16))
        app_icon.addFile('24x24.jpg', QtCore.QSize(24,24))
        app_icon.addFile('32x32.jpg', QtCore.QSize(32,32))
        app_icon.addFile('48x48.jpg', QtCore.QSize(48,48))
        app_icon.addFile('256x256.jpg', QtCore.QSize(256,256))
        self.setWindowIcon(app_icon)         
        self.label.setText(_translate("Dialog", "Информация о КСГ", None))
        self.label_4.setText(_translate("Dialog", "TextLabel", None))
        self.label_2.setText(_translate("Dialog", "Диагнозы по КСГ", None))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Код", None))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Наименование", None))
        if len(self.vmp_list)>0:
            self.label_3.setText(_translate("Dialog", "Методы ВМП", None))
        else:    
            self.label_3.setText(_translate("Dialog", "Услуги по КСГ", None))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Код", None))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Наименование", None))
        if len(self.vmp_list)>0:
            item = self.tableWidget_2.horizontalHeaderItem(2)
            item.setText(_translate("Dialog", "Диагнозы", None))
        self.label_5.setText(_translate("Dialog", "Замечания к КСГ", None))
        self.label_6.setText(_translate("Dialog", "Профиль КСГ", None))




class Ui_Dialog(QtGui.QDialog):
    def __init__(self,data,type_,search_txt_):
        super(Ui_Dialog, self).__init__()
        self.data=data
        self.type_=type_
        self.search_txt=search_txt_
        self.setupUi()   
       
    def setupUi(self):
        self.setObjectName(_fromUtf8("Dialog"))
        self.resize(1210, 809)
        self.setModal(True)
        self.verticalLayout = QtGui.QVBoxLayout(self)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.LineEdit=QtGui.QLineEdit(self)
        self.LineEdit.setObjectName(_fromUtf8("LineEdit"))
        self.verticalLayout.addWidget(self.LineEdit)
        self.LineEdit.textChanged.connect(self.search)
        self.pushButton = QtGui.QPushButton(self)
        self.pushButton.setObjectName(_fromUtf8("pushButton"))
        self.verticalLayout.addWidget(self.pushButton)
        self.tableWidget = QtGui.QTableWidget(self)
        self.tableWidget.setObjectName(_fromUtf8("tableWidget"))
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tableWidget.setWordWrap(True)
        self.verticalLayout.addWidget(self.tableWidget)
        
        
        '''тут надо повозиться!!!!
        header=["Код","Наименование"]
        self.tm = MyTableModel(self.data, header, self) 
        self.filter_proxy_model = QtGui.QSortFilterProxyModel()
        self.filter_proxy_model.setSourceModel(self.tm)
        self.LineEdit.textChanged.connect(self.filter)
        self.tableWidget.setModel(self.filter_proxy_model)
        self.tableWidget.resizeColumnsToContents()
        '''
        
                
        self.buttonBox = QtGui.QDialogButtonBox(self)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName(_fromUtf8("buttonBox"))
        self.verticalLayout.addWidget(self.buttonBox)
        

        self.retranslateUi(self)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("accepted()")), self.accept)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("rejected()")), self.reject)
        self.tableWidget.doubleClicked.connect(self.cellSelected)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.add_result(self.data)
        #self.tableWidget.resizeColumnsToContents()
        self.pushButton.clicked.connect(self.find_next)
        self.mkb=''
        if self.search_txt!='':
            self.LineEdit.setText(self.search_txt)
    
    '''пока не нужно
    def filter(self,search_str):
        search_str=str(search_str)#.encode("CP1251")
        search_str=QtCore.QString(search_str)
        self.filter_proxy_model.setFilterRegExp(search_str)
    '''
    def find_next(self):
        list_item=self.tableWidget.findItems("", QtCore.Qt.MatchContains)
        for item in list_item:
            item.setBackgroundColor(QtGui.QColor(255, 255, 255))  
        list_item=self.tableWidget.findItems(self.LineEdit.text(), QtCore.Qt.MatchContains)
        if len(list_item)>0:
            i=list_item.index(self.tableWidget.currentItem())
            i=i+1
            if i>=len(list_item):
                i=0               
            item=list_item[i]
            #for cell in self.tableWidget.items(QMimeData)
            item.setBackgroundColor(QtGui.QColor(216, 207, 252))  
            self.tableWidget.setCurrentItem(item)
    
    def search(self,search_str):
        list_item=self.tableWidget.findItems("", QtCore.Qt.MatchContains)
        for item in list_item:
            item.setBackgroundColor(QtGui.QColor(255, 255, 255))  
        list_item=self.tableWidget.findItems(search_str, QtCore.Qt.MatchContains)
        if len(list_item)>0:
            item=list_item[0]
            #for cell in self.tableWidget.items(QMimeData)
            item.setBackgroundColor(QtGui.QColor(216, 207, 252))  
            self.tableWidget.setCurrentItem(item)

        
    
    def cellSelected(self,item):
        cell=self.tableWidget.item(item.row(), 0)
        self.mkb=cell.text() 
        self.accept()
    
  
 
    
    def add_result(self,lst):
        self.tableWidget.setRowCount(0)
        i=0
        for item in lst:
            if len(item)>0:
                self.tableWidget.insertRow(i)
                self.tableWidget.setRowHeight(i,40)
                j=0
                for parts in item:
                    self.tableWidget.setItem(i,j,QtGui.QTableWidgetItem((str(parts).decode('CP866'))))
                    self.tableWidget.item(i,j).setFlags(QtCore.Qt.ItemIsEnabled)
                    j=j+1
                i=i+1
        self.tableWidget.setColumnWidth(0,100)
        self.tableWidget.setColumnWidth(1,600)
    
    def retranslateUi(self, Dialog):
        self.setWindowTitle(_translate("Dialog", "Справочник", None))
        app_icon = QtGui.QIcon()
        app_icon.addFile('16x16.jpg', QtCore.QSize(16,16))
        app_icon.addFile('24x24.jpg', QtCore.QSize(24,24))
        app_icon.addFile('32x32.jpg', QtCore.QSize(32,32))
        app_icon.addFile('48x48.jpg', QtCore.QSize(48,48))
        app_icon.addFile('256x256.jpg', QtCore.QSize(256,256))
        self.setWindowIcon(app_icon)         
        self.tableWidget.setSortingEnabled(True)
        item=self.tableWidget.horizontalHeaderItem(0) 
        if self.type_==1:
            item.setText(_translate("Dialog", "Код МКБ", None))
        elif self.type_==2:
            item.setText(_translate("Dialog", "Код услуги", None))
        item =self.tableWidget.horizontalHeaderItem(1) 
        if self.type_==1:
            item.setText(_translate("Dialog", "Наименование МКБ", None))
        elif self.type_==2:
            item.setText(_translate("Dialog", "Наименование услуги", None)) 
        self.pushButton.setText(_translate("Dialog", "Далее>>>", None))           
            


class Ui_Form(QtGui.QWidget):
    def __init__(self):
        super(Ui_Form, self).__init__()
        self.setupUi()
            
    def setupUi(self):
        self.setObjectName(_fromUtf8("Form"))
        self.resize(1210, 809)
        self.setWindowIcon(QtGui.QIcon('favicon.ico'))
        self.gridLayout = QtGui.QGridLayout(self)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.groupBox = QtGui.QGroupBox(self)
        self.groupBox.setObjectName(_fromUtf8("groupBox"))
        self.formLayout = QtGui.QFormLayout(self.groupBox)
        self.formLayout.setObjectName(_fromUtf8("formLayout"))
        self.label = QtGui.QLabel(self.groupBox)
        self.label.setObjectName(_fromUtf8("label"))
        self.formLayout.setWidget(0, QtGui.QFormLayout.LabelRole, self.label)
        self.lineEdit = QtGui.QLineEdit(self.groupBox)
        self.lineEdit.setInputMask(">A99.00")
        self.lineEdit.installEventFilter(self)
        self.lineEdit.setObjectName(_fromUtf8("lineEdit"))
        self.formLayout.setWidget(0, QtGui.QFormLayout.FieldRole, self.lineEdit)
        self.lineEdit_2 = QtGui.QLineEdit(self.groupBox)
        self.lineEdit_2.setInputMask(">A99.00")
        self.lineEdit_2.installEventFilter(self)
        self.lineEdit_2.setObjectName(_fromUtf8("lineEdit_2"))
        self.formLayout.setWidget(1, QtGui.QFormLayout.FieldRole, self.lineEdit_2)
        self.label_2 = QtGui.QLabel(self.groupBox)
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.formLayout.setWidget(1, QtGui.QFormLayout.LabelRole, self.label_2)
        self.label_3 = QtGui.QLabel(self.groupBox)
        self.label_3.setObjectName(_fromUtf8("label_3"))
        self.formLayout.setWidget(2, QtGui.QFormLayout.LabelRole, self.label_3)
        self.lineEdit_3 = QtGui.QLineEdit(self.groupBox)
        self.lineEdit_3.setInputMask(">Axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        self.lineEdit_3.installEventFilter(self)
        self.lineEdit_3.setObjectName(_fromUtf8("lineEdit_3"))
        self.formLayout.setWidget(2, QtGui.QFormLayout.FieldRole, self.lineEdit_3)
        self.label_4 = QtGui.QLabel(self.groupBox)
        self.label_4.setObjectName(_fromUtf8("label_4"))
        self.formLayout.setWidget(3, QtGui.QFormLayout.LabelRole, self.label_4)
        self.comboBox = QtGui.QComboBox(self.groupBox)
        self.comboBox.setObjectName(_fromUtf8("comboBox"))
        self.comboBox.addItem('М')
        self.comboBox.addItem('Ж')
        self.formLayout.setWidget(3, QtGui.QFormLayout.FieldRole, self.comboBox)
        self.label_5 = QtGui.QLabel(self.groupBox)
        self.label_5.setObjectName(_fromUtf8("label_5"))
        self.formLayout.setWidget(4, QtGui.QFormLayout.LabelRole, self.label_5)
        self.dateEdit = QtGui.QLineEdit(self.groupBox)
        self.dateEdit.setObjectName(_fromUtf8("dateEdit"))
        self.dateEdit.setInputMask("99.99.9999;_")
        self.formLayout.setWidget(4, QtGui.QFormLayout.FieldRole, self.dateEdit)
        self.label_7 = QtGui.QLabel(self.groupBox)
        self.label_7.setObjectName(_fromUtf8("label_7"))
        self.formLayout.setWidget(5, QtGui.QFormLayout.LabelRole, self.label_7)
        self.dateEdit_3 = QtGui.QLineEdit(self.groupBox)
        self.dateEdit_3.setObjectName(_fromUtf8("dateEdit_3"))
        self.dateEdit_3.setInputMask("99.99.99;_")
        self.formLayout.setWidget(5, QtGui.QFormLayout.FieldRole, self.dateEdit_3)        
        self.label_6 = QtGui.QLabel(self.groupBox)
        self.label_6.setObjectName(_fromUtf8("label_6"))     
        self.formLayout.setWidget(6, QtGui.QFormLayout.LabelRole, self.label_6)
        self.dateEdit_2 = QtGui.QLineEdit(self.groupBox)
        self.dateEdit_2.setObjectName(_fromUtf8("dateEdit_2"))
        self.dateEdit_2.setInputMask("99.99.99;_")
        self.formLayout.setWidget(6, QtGui.QFormLayout.FieldRole, self.dateEdit_2)
        self.checkBox = QtGui.QCheckBox(self.groupBox)
        self.checkBox.setObjectName(_fromUtf8("checkBox"))
        self.formLayout.setWidget(7, QtGui.QFormLayout.LabelRole, self.checkBox)
        self.pushButton = QtGui.QPushButton(self.groupBox)
        self.pushButton.setObjectName(_fromUtf8("pushButton"))
        self.formLayout.setWidget(8, QtGui.QFormLayout.LabelRole, self.pushButton)
        self.pushButton_2 = QtGui.QPushButton(self.groupBox)
        self.pushButton_2.setObjectName(_fromUtf8("pushButton_2"))
        self.formLayout.setWidget(9, QtGui.QFormLayout.LabelRole, self.pushButton_2)        
        self.gridLayout.addWidget(self.groupBox, 0, 0, 1, 1)
        self.tabWidget=QtGui.QTabWidget(self)
        self.tabWidget.setObjectName(_fromUtf8("tabWidget"))
        self.tabKSG=QtGui.QWidget(self)
        self.tabVMP=QtGui.QWidget(self)
        self.tabWidget.addTab(self.tabKSG, "КСГ")
        self.tabWidget.addTab(self.tabVMP, "ВМП")
        self.gridLayout.addWidget(self.tabWidget, 1, 0, 1, 1) 
        self.gridLayout_2 = QtGui.QGridLayout(self.tabKSG)
        self.gridLayout_2.setObjectName(_fromUtf8("gridLayout_2"))
        self.gridLayout_3 = QtGui.QGridLayout(self.tabVMP)
        self.gridLayout_3.setObjectName(_fromUtf8("gridLayout_3"))


        self.tableWidget = QtGui.QTableWidget(self)
        self.tableWidget.setObjectName(_fromUtf8("tableWidget"))
        self.tableWidget.setColumnCount(5)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        
        '''item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(11, item)'''
        
        #self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.setWordWrap(True)
        self.tableWidget.setColumnWidth(0,80)
        self.tableWidget.setColumnWidth(1,350)
        self.tableWidget.setColumnWidth(2,60)
        self.tableWidget.setColumnWidth(3,100)
        self.tableWidget.setColumnWidth(4,100)
        self.gridLayout_2.addWidget(self.tableWidget, 1, 0, 1, 1)
        
        self.tableWidget_2 = QtGui.QTableWidget(self)
        self.tableWidget_2.setObjectName(_fromUtf8("tableWidget_2"))
        self.tableWidget_2.setColumnCount(5)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        
        '''item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(5, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(6, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(7, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(8, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(9, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(10, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(11, item)'''
        
        #self.tableWidget_2.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget_2.setWordWrap(True)
        self.tableWidget_2.setColumnWidth(0,120)
        self.tableWidget_2.setColumnWidth(1,600)
        self.tableWidget_2.setColumnWidth(2,60)
        self.tableWidget_2.setColumnWidth(3,100)
        self.tableWidget_2.setColumnWidth(4,100)
        self.gridLayout_3.addWidget(self.tableWidget_2, 1, 0, 1, 1)        
        

        
        self.tableWidget.doubleClicked.connect(self.get_ksg_info)
        self.tableWidget_2.doubleClicked.connect(self.get_vmp_info)
        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.pushButton.clicked.connect(self.find_ksg)
        self.pushButton_2.clicked.connect(self.find_may_ksg)
        self.get_data()
        self.show()
     
    def get_ksg_info(self,item):
        cell=self.tableWidget.item(item.row(), 0)
        self.ksg_info=ksg_info(cell.text(),self.mkb_list,self.usl_list,self.ksg_list,[])
        self.ksg_info.show()   
    
    def get_vmp_info(self,item):
        cell=self.tableWidget_2.item(item.row(), 0)
        self.ksg_info=ksg_info(cell.text(),self.mkb_list,[],self.ksg_list,self.vmp_methods)
        self.ksg_info.show() 
     
    def get_data(self):
        db = dbf.Dbf("tab_ksg.dbf")
        self.ksg_list=[]
        a=[]
        for rec in db:
            a=[rec["CODE_KSG"],rec["KSG_NAME"],rec["KSG_KOEF"],rec["DS_OSN_MKB"],rec["DS_SOP_MKB"],
               rec["CODE_USLUG"],rec["MALE"],rec["VOZRAST"],rec["IS_DAY_STA"],rec["DLITEL"],rec["IS_VMP"],rec["DAE"],rec["NAME_PROFI"]]
            self.ksg_list.append(a)
        db.close()
        db = dbf.Dbf("tab_mkb.dbf")
        self.mkb_list=[]
        a=[]
        for rec in db:
            a=[rec[0],rec[1]] 
            self.mkb_list.append(a)   
        db.close()
        db = dbf.Dbf("tab_uslug.dbf")
        self.usl_list=[]
        a=[]
        for rec in db:
            a=[rec[0],rec[1]] 
            self.usl_list.append(a)    
        db.close()
        self.vmp_methods=[]
        db = dbf.Dbf("vmp_methods.dbf")
        a=[]
        for rec in db:
            a=[rec[0],rec[1],rec[2],rec[3]] 
            self.vmp_methods.append(a)    
        db.close()
        self.mes_price=[]
        tree = etree.parse('SK005.xml')  
        root = tree.getroot()
        for child in root:
            self.mes_price.append([child.attrib["MES"],child.attrib["SUM_DET"],child.attrib["SUM_VZ"],child.attrib["DATE_BEGIN"]])  
                      
        
    def add_result(self,ksg_lst):
        self.tableWidget.setRowCount(0)
        self.tableWidget_2.setRowCount(0)
        i=0
        for ksg in ksg_lst:
            if len(ksg)>0:
                if ksg[10]==1:
                    widget=self.tableWidget_2
                else:
                    widget=self.tableWidget
                i=widget.rowCount()    
                widget.insertRow(i)
                #widget.resizeColumnsToContents()
                widget.setWordWrap(True)
                widget.setRowHeight(i,60)
                j=0
                for ksg_items in ksg:
                    widget.setItem(i,j,QtGui.QTableWidgetItem((str(ksg_items).decode('CP866'))))
                    j=j+1
                    if j==1:
                        mess=[]
                        for mes in self.mes_price:
                            if ksg_items in mes:
                                mess.append(mes)
                    if j==11:
                        has=False
                        k=0
                        rez_index=0
                        for ksg_price in mess:
                            if not(has):
                                b=datetime.datetime.strptime(ksg_price[3],"%Y-%m-%d")
                            a=datetime.datetime.strptime(ksg_price[3],"%Y-%m-%d")
                            if a>=b:
                                b=datetime.datetime.strptime(ksg_price[3],"%Y-%m-%d")   
                                rez_index=k 
                            k=k+1 
                        widget.setItem(i,3,QtGui.QTableWidgetItem(mess[rez_index][2]))
                        widget.setItem(i,4,QtGui.QTableWidgetItem(mess[rez_index][1]))     
                i=i+1
       
    def find_may_ksg(self):
        ds_osn=self.lineEdit.text()
        if ds_osn=='.':
            ds_osn=''
        ds_sop=self.lineEdit_2.text()
        if ds_sop=='.':
            ds_sop=''
        usl_list=self.lineEdit_3.text()
        male_txt=self.comboBox.currentText()
        male_int=0 
        if male_txt=='М':
            male_int=1
        if male_txt=='Ж':
            male_int=2
        if usl_list!='':
            usl_list='|'+usl_list.replace(',','|')+'|' 
        is_day_stac=0
        if self.checkBox.checkState()==QtCore.Qt.Checked:
            is_day_stac=1            
        may_be_ksg=[]
        may_be_uslov=[]
        for a in self.ksg_list:
            if len(a)>0 and not (a in self.result_end):
                need_out=True
                if a[3]==ds_osn and not('|'+a[5]+'|' in usl_list) and a[3]!='' and a[10]==0 and is_day_stac==a[8]:
                    if male_int>0 and a[6]>0:
                        if male_int!=int(a[6]):
                            need_out=False 
                    vozrast=0;
                    born=datetime.datetime.strptime(str(self.dateEdit.text()),"%d.%m.%Y")   
                    #self.dateEdit.date()
                    d_exit=datetime.datetime.strptime(str(self.dateEdit_2.text()),"%d.%m.%Y")
                    #self.dateEdit_2.date()
                    d_enter=datetime.datetime.strptime(str(self.dateEdit_3.text()),"%d.%m.%Y")
                    #self.dateEdit_3.date()
                    tmp_date=datetime.datetime(born.year+18,born.month,born.day)
                    dae=datetime.datetime.strptime(str(a[11]),"%d.%m.%Y %H:%M")
                    if dae<d_exit:
                        need_out=False
                    if d_exit<tmp_date:
                        vozrast=4
                    else:
                        vozrast=5   
                    if vozrast>0 and a[7]>0:
                        if ('16044' in a[0]) or ('16045' in a[0]) or ('16107' in a[0]):
                            tmp_dlit=(d_exit-born).days
                            if tmp_dlit>=0 and tmp_dlit<=28:
                                vozrast=1
                            if tmp_dlit>=29 and tmp_dlit<=90: 
                                vozrast=2
                            if tmp_dlit>=91 and tmp_dlit<=366: 
                                vozrast=3     
                        if vozrast<>int(a[7]):
                            need_out=False   
                    dlit=0
                    tmp_dlit=(d_exit-d_enter).days
                    if tmp_dlit<=3:
                        dlit=1    
                    if int(a[9])<>dlit and int(a[9])>0:
                        need_out=False
                    if need_out:
                        may_be_ksg.append([a[0],a[1],a[3],a[4],a[5]])
                        may_be_uslov.append(4)
                elif a[3]<>ds_osn and ('|'+a[5]+'|' in usl_list) and a[3]!='' and a[10]==0 and is_day_stac==a[8]:
                    if male_int>0 and a[6]>0:
                        if male_int!=int(a[6]):
                            need_out=False 
                    vozrast=0;
                    born=datetime.datetime.strptime(str(self.dateEdit.text()),"%d.%m.%Y")   
                    #self.dateEdit.date()
                    d_exit=datetime.datetime.strptime(str(self.dateEdit_2.text()),"%d.%m.%Y")
                    #self.dateEdit_2.date()
                    d_enter=datetime.datetime.strptime(str(self.dateEdit_3.text()),"%d.%m.%Y")
                    #self.dateEdit_3.date()
                    tmp_date=datetime.datetime(born.year+18,born.month,born.day)
                    dae=datetime.datetime.strptime(str(a[11]),"%d.%m.%Y %H:%M")
                    if dae<d_exit:
                        need_out=False
                    if d_exit<tmp_date:
                        vozrast=4
                    else:
                        vozrast=5   
                    if vozrast>0 and a[7]>0:
                        if ('16044' in a[0]) or ('16045' in a[0]) or ('16107' in a[0]):
                            tmp_dlit=(d_exit-born).days
                            if tmp_dlit>=0 and tmp_dlit<=28:
                                vozrast=1
                            if tmp_dlit>=29 and tmp_dlit<=90: 
                                vozrast=2
                            if tmp_dlit>=91 and tmp_dlit<=366: 
                                vozrast=3     
                        if vozrast<>int(a[7]):
                            need_out=False   
                    dlit=0
                    tmp_dlit=(d_exit-d_enter).days
                    if tmp_dlit<=3:
                        dlit=1    
                    if int(a[9])<>dlit and int(a[9])>0:
                        need_out=False
                    if need_out:                    
                        may_be_ksg.append([a[0],a[1],a[3],a[4],a[5]])
                        may_be_uslov.append(2)
                elif a[3]==ds_osn and ('|'+a[5]+'|' in usl_list) and ds_sop!=a[4] and a[4]!='' and a[10]==0 and is_day_stac==a[8]:
                    if male_int>0 and a[6]>0:
                        if male_int!=int(a[6]):
                            need_out=False 
                    vozrast=0;
                    born=datetime.datetime.strptime(str(self.dateEdit.text()),"%d.%m.%Y")   
                    #self.dateEdit.date()
                    d_exit=datetime.datetime.strptime(str(self.dateEdit_2.text()),"%d.%m.%Y")
                    #self.dateEdit_2.date()
                    d_enter=datetime.datetime.strptime(str(self.dateEdit_3.text()),"%d.%m.%Y")
                    #self.dateEdit_3.date()
                    tmp_date=datetime.datetime(born.year+18,born.month,born.day)
                    dae=datetime.datetime.strptime(str(a[11]),"%d.%m.%Y %H:%M")
                    if dae<d_exit:
                        need_out=False
                    if d_exit<tmp_date:
                        vozrast=4
                    else:
                        vozrast=5   
                    if vozrast>0 and a[7]>0:
                        if ('16044' in a[0]) or ('16045' in a[0]) or ('16107' in a[0]):
                            tmp_dlit=(d_exit-born).days
                            if tmp_dlit>=0 and tmp_dlit<=28:
                                vozrast=1
                            if tmp_dlit>=29 and tmp_dlit<=90: 
                                vozrast=2
                            if tmp_dlit>=91 and tmp_dlit<=366: 
                                vozrast=3     
                        if vozrast<>int(a[7]):
                            need_out=False   
                    dlit=0
                    tmp_dlit=(d_exit-d_enter).days
                    if tmp_dlit<=3:
                        dlit=1    
                    if int(a[9])<>dlit and int(a[9])>0:
                        need_out=False
                    if need_out:                     
                        may_be_ksg.append([a[0],a[1],a[3],a[4],a[5]])
                        may_be_uslov.append(3)
        if len(may_be_ksg)>0:
            self.message=message(may_be_ksg,may_be_uslov,self.usl_list)
            self.message.show() 
        
    def find_ksg(self):
        ds_osn=self.lineEdit.text()
        if ds_osn=='.':
            ds_osn=''
        ds_sop=self.lineEdit_2.text()
        if ds_sop=='.':
            ds_sop=''
        usl_list=self.lineEdit_3.text()
        male_txt=self.comboBox.currentText()
        male_int=0 
        if male_txt=='М':
            male_int=1
        if male_txt=='Ж':
            male_int=2
        if usl_list!='':
            usl_list='|'+usl_list.replace(',','|')+'|' 
        result=[[]]    
        for a in self.ksg_list:
            if len(a)>0:
                if ds_osn!='':    
                    if (a[3]==ds_osn or a[3]==ds_osn[1]+'.' or a[3]=='') and ('|'+a[5]+'|' in usl_list or a[5]==''):
                        result.append(a)
                else:
                    if  ('|'+a[5]+'|' in usl_list):
                        result.append(a)
        '''for ksg in result:  родов у них нету,но на всякий случай- блок оставлю
            if len(ksg)>0:  
                if (not('|B01.001.009.001|' in usl_list) and
                    not('|B02.001.002|' in usl_list) and
                    not('|B01.001.006|' in usl_list)) and ksg[0]=='CS16004' :'''
        self.result_end=[]
        is_day_stac=0
        if self.checkBox.checkState()==QtCore.Qt.Checked:
            is_day_stac=1
        for ksg in result:     
            need_out=True
            if len(ksg)>0:
                if ds_sop!='' and ksg[4]!='':
                    if ds_sop!=ksg[4]:
                        need_out=False
                if male_int>0 and ksg[6]>0:
                    if male_int!=int(ksg[6]):
                        need_out=False 
                vozrast=0;
                born=datetime.datetime.strptime(str(self.dateEdit.text()),"%d.%m.%Y")   
                #self.dateEdit.date()
                d_exit=datetime.datetime.strptime(str(self.dateEdit_2.text()),"%d.%m.%Y")
                #self.dateEdit_2.date()
                d_enter=datetime.datetime.strptime(str(self.dateEdit_3.text()),"%d.%m.%Y")
                #self.dateEdit_3.date()
                tmp_date=datetime.datetime(born.year+18,born.month,born.day)
                dae=datetime.datetime.strptime(str(ksg[11]),"%d.%m.%Y %H:%M")
                if dae<d_exit:
                    need_out=False
                if d_exit<tmp_date:
                    vozrast=4
                else:
                    vozrast=5   
                if vozrast>0 and ksg[7]>0:
                    if ('16044' in ksg[0]) or ('16045' in ksg[0]) or ('16107' in ksg[0]):
                        tmp_dlit=(d_exit-born).days
                        if tmp_dlit>=0 and tmp_dlit<=28:
                            vozrast=1
                        if tmp_dlit>=29 and tmp_dlit<=90: 
                            vozrast=2
                        if tmp_dlit>=91 and tmp_dlit<=366: 
                            vozrast=3     
                    if vozrast<>int(ksg[7]):
                        need_out=False   
                dlit=0
                tmp_dlit=(d_exit-d_enter).days
                if tmp_dlit<=3:
                    dlit=1    
                if int(ksg[9])<>dlit and int(ksg[9])>0:
                    need_out=False
                if is_day_stac<>ksg[8]:
                    need_out=False
                if need_out:
                    self.result_end.append(ksg)
        self.add_result(self.result_end)       
                      
        
    def retranslateUi(self, Form):
        Form.setWindowTitle(_translate("Form", "Подбор КСГ", None))
        app_icon = QtGui.QIcon()
        app_icon.addFile('16x16.jpg', QtCore.QSize(16,16))
        app_icon.addFile('24x24.jpg', QtCore.QSize(24,24))
        app_icon.addFile('32x32.jpg', QtCore.QSize(32,32))
        app_icon.addFile('48x48.jpg', QtCore.QSize(48,48))
        app_icon.addFile('256x256.jpg', QtCore.QSize(256,256))
        Form.setWindowIcon(app_icon)         
        self.groupBox.setTitle(_translate("Form", "Параметры подбора", None))
        self.label.setText(_translate("Form", "Код МКБ основного диагноза", None))
        self.label_2.setText(_translate("Form", "Код МКБ сопутствующего диагноза", None))
        self.label_3.setText(_translate("Form", "Список услуг", None))
        self.label_4.setText(_translate("Form", "Пол пациента", None))
        self.label_5.setText(_translate("Form", "Дата рождения пациента", None))
        self.label_6.setText(_translate("Form", "Дата выписки", None))
        self.checkBox.setText(_translate("Form", "Лечение в дневном стационаре", None))
        self.label_7.setText(_translate("Form", "Дата начала лечения", None))
        self.pushButton.setText(_translate("Form", "Подбор КСГ", None))
        self.pushButton_2.setText(_translate("Form", "Возможные КСГ", None))
        self.tableWidget.setSortingEnabled(True)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Код КСГ", None))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Наименование КСГ", None))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "КфОз", None))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Цена взрослые", None))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Цена дети", None))
        '''item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "Код услуги", None))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Form", "Пол", None))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("Form", "Возрастной критерий", None))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("Form", "Дневной стационар", None))'''

        self.tableWidget_2.setSortingEnabled(True)
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Код КСГ", None))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Наименование КСГ", None))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("Form", "КфОз", None))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Цена взрослые", None))
        item = self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Цена дети", None))
        '''item = self.tableWidget_2.horizontalHeaderItem(5)
        item.setText(_translate("Form", "Код услуги", None))
        item = self.tableWidget_2.horizontalHeaderItem(6)
        item.setText(_translate("Form", "Пол", None))
        item = self.tableWidget_2.horizontalHeaderItem(7)
        item.setText(_translate("Form", "Возрастной критерий", None))
        item = self.tableWidget_2.horizontalHeaderItem(8)
        item.setText(_translate("Form", "Дневной стационар", None))'''

    def eventFilter(self, widget, event):
        if event.type() == QtCore.QEvent.FocusOut:
            win32api.LoadKeyboardLayout("00000419",1)
            return False
        elif event.type() == QtCore.QEvent.FocusIn:
            win32api.LoadKeyboardLayout("00000409",1)
            return False
        elif event.type() == QtCore.QEvent.KeyPress:
            if event.key()==QtCore.Qt.Key_Return:
                type_=1
                if widget==self.lineEdit_3:
                    type_=2
                    self.sprav=Ui_Dialog(self.usl_list, type_,self.lineEdit_3.text())
                    
                else:
                    type_=1   
                    self.sprav=Ui_Dialog(self.mkb_list, type_,'') 
                self.sprav.exec_()
                widget.setText(self.sprav.mkb)
            return False
        else:
            return False
def main(): 
    app = QtGui.QApplication( sys.argv )  
    QtCore.QTextCodec.setCodecForCStrings(QtCore.QTextCodec.codecForName("UTF-8"))   
    app_icon = QtGui.QIcon()
    app_icon.addFile('16x16.jpg', QtCore.QSize(16,16))
    app_icon.addFile('24x24.jpg', QtCore.QSize(24,24))
    app_icon.addFile('32x32.jpg', QtCore.QSize(32,32))
    app_icon.addFile('48x48.jpg', QtCore.QSize(48,48))
    app_icon.addFile('256x256.jpg', QtCore.QSize(256,256))
    app.setWindowIcon(app_icon) 
    try:
        key=_winreg.OpenKey(_winreg.HKEY_CURRENT_USER, 'SOFTWARE\\GETKSG',0,_winreg.KEY_ALL_ACCESS) 
        a=_winreg.QueryValueEx(key,'start')
        b=datetime.datetime.now()
        c=datetime.datetime.strptime(str(a[0]),"%d.%m.%Y")
        d=(b-c).days
        e=30-d
        need_start=False
        if e>0:
            QtGui.QMessageBox.about(None,'Ограничение использования','Пробная версия программы доступна еще в течении '+str(e)+' дней.')
            need_start=True  
    except EnvironmentError:
        _winreg.CreateKey(_winreg.HKEY_CURRENT_USER, 'SOFTWARE\\GETKSG')
        key=_winreg.OpenKey(_winreg.HKEY_CURRENT_USER, 'SOFTWARE\\GETKSG',0,_winreg.KEY_ALL_ACCESS)
        _winreg.SetValueEx(key, "start", 0, _winreg.REG_SZ,datetime.datetime.strftime(datetime.datetime.now(),"%d.%m.%Y"))
        QtGui.QMessageBox.about(None,'Ограничение использования','Добро пожаловать в программу-помощник для подбора КСГ. Пробная версия программы будет доступна  в течении 30 дней.')
        need_start=True     
    if need_start:
        ex = Ui_Form()
        sys.exit(app.exec_())
    else:
        QtGui.QMessageBox.about(None,'Ограничение использования','Время использования пробной версией программы истекло. Запуск невозможен.')
		
if __name__ == '__main__':
    main()
